// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$all-name: 'all'
$all-x: 0px
$all-y: 0px
$all-offset-x: 0px
$all-offset-y: 0px
$all-width: 32px
$all-height: 20px
$all-total-width: 81px
$all-total-height: 54px
$all-image: 'sprite.png'
$all: (0px, 0px, 0px, 0px, 32px, 20px, 81px, 54px, 'sprite.png', 'all', )
$call-name: 'call'
$call-x: 68px
$call-y: 0px
$call-offset-x: -68px
$call-offset-y: 0px
$call-width: 13px
$call-height: 13px
$call-total-width: 81px
$call-total-height: 54px
$call-image: 'sprite.png'
$call: (68px, 0px, -68px, 0px, 13px, 13px, 81px, 54px, 'sprite.png', 'call', )
$gift-name: 'gift'
$gift-x: 0px
$gift-y: 30px
$gift-offset-x: 0px
$gift-offset-y: -30px
$gift-width: 21px
$gift-height: 24px
$gift-total-width: 81px
$gift-total-height: 54px
$gift-image: 'sprite.png'
$gift: (0px, 30px, 0px, -30px, 21px, 24px, 81px, 54px, 'sprite.png', 'gift', )
$question-name: 'question'
$question-x: 42px
$question-y: 0px
$question-offset-x: -42px
$question-offset-y: 0px
$question-width: 16px
$question-height: 16px
$question-total-width: 81px
$question-total-height: 54px
$question-image: 'sprite.png'
$question: (42px, 0px, -42px, 0px, 16px, 16px, 81px, 54px, 'sprite.png', 'question', )
$zoom-name: 'zoom'
$zoom-x: 42px
$zoom-y: 26px
$zoom-offset-x: -42px
$zoom-offset-y: -26px
$zoom-width: 16px
$zoom-height: 16px
$zoom-total-width: 81px
$zoom-total-height: 54px
$zoom-image: 'sprite.png'
$zoom: (42px, 26px, -42px, -26px, 16px, 16px, 81px, 54px, 'sprite.png', 'zoom', )
$spritesheet-width: 81px
$spritesheet-height: 54px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($all, $call, $gift, $question, $zoom, )
$spritesheet: (81px, 54px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
